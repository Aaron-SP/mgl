#version 300 es

// This must be in fragment shader
precision mediump float;

// Inputs from vertex shader
in vec4 _vertex;
in vec2 _uv;
in vec3 _normal;
in vec4 _shadow;
in vec3 _view_dir;

// Create the light struct and the uniform blocks
// This is the maximum light count and is needed since UBO expires an explicit array count
#define MAX_NUM_TOTAL_LIGHTS 1
struct light
{
    vec4 color;
    vec4 position;
    vec4 power;
};

layout(std140) uniform light_block
{
    light lights[MAX_NUM_TOTAL_LIGHTS];
    int light_size;
};

// Texture input
uniform sampler2D in_texture;

// Shadow input
uniform mediump sampler2DShadow shadow_texture;

// Output color
out vec4 color;

// Poisson sampling
vec2 poisson_disk[4] = vec2[](
   vec2( 0.298707,  0.964423 ),
   vec2(-0.750167, -0.760636 ),
   vec2( 0.893031,  0.0945547),
   vec2( 0.512753, -0.994943)
);

void main(void)
{
	// Initialize reference color
    vec4 _color = vec4(0.0, 0.0, 0.0, 1.0);

    // For all lights in the scene
    for(int i = 0; i < light_size; i++)
    {
        // Calculate the light world coordinates
        vec3 light_direction = normalize(lights[i].position - _vertex).xyz;

        // Calculate reflection and drop off
        float angle = dot(_normal, light_direction);
        float cos_theta = clamp(angle, 0.0, 1.0);
        vec3 reflection = reflect(-light_direction, _normal);
        float cos_alpha = max(dot(_view_dir, reflection), 0.0);

        // Calculate ambient, diffuse and specular
        float ambient = lights[i].power.x;
        float diffuse = lights[i].power.y * cos_theta;
        float specular = lights[i].power.z * pow(cos_alpha, 5.0);

        // Weighted sum of passing depth test from texture depth (0.0 or 1.0)
        // Sum is proportional to the number of samples in the shadow texture that pass the comparison
        float shadow = 0.0;
        if(angle > 0.0)
        {
            // Calculate bias shadow bias
            float bias = 0.001 * tan(acos(angle));
            for (int i = 0; i < 4; i++)
            {
                vec2 sampling = poisson_disk[i] / 50.0;
                vec4 shadow_coord = _shadow;
                shadow_coord.x += sampling.x;
                shadow_coord.y += sampling.y;
                shadow_coord.z += bias;
                shadow += textureProj(shadow_texture, shadow_coord) * 0.25;
            }
        }

        // Calculate the output color
        _color += lights[i].color * ambient;
        _color += lights[i].color * ((diffuse + specular) * shadow);


        // Render shadows only
        //color += vec4(shadow, shadow, shadow, 1.0);
        
        // Render color and shadows together
        color +=  vec4(texture(in_texture, _uv).rgb * _color.rgb, 1.0);
    }
}
