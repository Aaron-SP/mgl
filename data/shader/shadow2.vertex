#version 330 core

layout (location = 0) in vec4 vertex;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 normal;

#define MAX_NUM_TOTAL_MATRIX 5
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int matrix_size;
};

#define MAX_NUM_TOTAL_VECTOR 1
layout(std140) uniform vector_block
{
    vec4 vector[MAX_NUM_TOTAL_VECTOR];
    int vector_size;
};

out vec4 _vertex;
out vec2 _uv;
out vec3 _normal;
out vec4 _shadow;
out vec3 _view_dir;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix[0];
    mat4 shadow = matrix[1];
    mat4 model = matrix[3];

    // Get the camera position
    vec4 cam_position = vector[0];

	// Calculate the vertex world coordinates
    vec4 vertex_world = model * vertex;

	// Calculate transformed position
	gl_Position =  pv * vertex_world;

    // Pass the position in world coordinates
    _vertex = vertex_world;

	// Pass texture coordinates to fragment shader
	_uv = uv;

    // Calculate the normal in world coordinates
    _normal = normalize(mat3(model) * normal);

    // Calculate the camera direction
    _view_dir = normalize(cam_position.xyz - vertex_world.xyz);

    // Pass the shadow coordinate to the fragment shader
    _shadow = shadow * vertex_world;
}
