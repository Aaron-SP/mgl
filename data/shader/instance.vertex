#version 330 core

layout (location = 0) in vec4 vertex;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 normal;

out vec3 out_normal;
out vec2 out_uv;
out vec4 out_vertex;

#define MAX_NUM_TOTAL_MATRIX 102
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int matrix_size;
};

#define MAX_NUM_TOTAL_VECTOR 1
layout(std140) uniform vector_block
{
    vec4 vector[MAX_NUM_TOTAL_VECTOR];
    int vector_size;
};

out vec4 out_cam_position;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix[0];
    mat4 model = matrix[1 + gl_InstanceID];

    // Get the camera position
    out_cam_position = vector[0];

	// Calculate transformed position
	gl_Position =  pv * model * vertex;

    // Calculate the normal in world coordinates
    out_normal = normalize(mat3(model) * normal);

	// Pass texture coordinates to fragment shader
	out_uv = uv;

    // Calculate the vertex in world coordinates
    out_vertex = model * vertex;
}
