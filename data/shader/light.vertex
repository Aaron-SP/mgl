#version 300 es

layout (location = 0) in vec4 vertex;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 normal;

// Create the light struct and the uniform blocks
// This is the maximum light count and is needed since UBO expires an explicit array count
#define MAX_NUM_TOTAL_LIGHTS 1
struct light
{
    vec4 color;
    vec4 position;
    vec4 power;
};

layout(std140) uniform light_block
{
    light lights[MAX_NUM_TOTAL_LIGHTS];
    int light_size;
};

#define MAX_NUM_TOTAL_MATRIX 2
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int matrix_size;
};

#define MAX_NUM_TOTAL_VECTOR 1
layout(std140) uniform vector_block
{
    vec4 vector[MAX_NUM_TOTAL_VECTOR];
    int vector_size;
};

out vec2 out_uv;
out vec4 out_color;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix[0];
    mat4 model = matrix[1];

    // Get the camera position
    vec4 cam_position = vector[0];

	// Calculate transformed position
	gl_Position =  pv * model * vertex;

	// Calculate the vertex world coordinates
    vec4 vertex_world = model * vertex;

    // Calculate the camera direction
    vec3 view_dir = normalize(cam_position.xyz - vertex_world.xyz);

    // Calculate the normal in world coordinates
    vec3 normal_world = normalize(mat3(model) * normal);

    // Initialize reference color
    vec4 color = vec4(0, 0, 0, 1.0);

    // For all lights in the scene
    for(int i = 0; i < light_size; i++)
    {
        // Calculate the light world coordinates
        vec3 light_direction = (lights[i].position - vertex_world).xyz;
        float inv_d2 = 1.0 / dot(light_direction, light_direction);
        light_direction = normalize(light_direction);

        // Calculate reflection and drop off
        float cos_theta = max(dot(normal_world, light_direction), 0.0);
        vec3 reflection = reflect(-light_direction, normal_world);
        float cos_alpha = max(dot(view_dir, reflection), 0.0);

        // Calculate ambient, diffuse and specular
        float ambient = lights[i].power.x;
        float diffuse = lights[i].power.y * cos_theta * inv_d2;
        float specular = lights[i].power.z * pow(cos_alpha, 5.0) * inv_d2;

        // Calculate the output color
        color += lights[i].color * (ambient + diffuse + specular);
    }

	// Pass texture coordinates to fragment shader
	out_uv = uv;

    // Pass the color to the fragment shader
    out_color = vec4(color.rgb, 1.0);
}
